import java.util.*;

public class BFS {
    private int vertices; // Number of vertices in the graph
    private LinkedList<Integer> adj[]; // Adjacency List for the graph

    // Constructor to initialize the graph
    public BFS(int vertices) {
        this.vertices = vertices;
        adj = new LinkedList[vertices];
        for (int i = 0; i < vertices; i++) {
            adj[i] = new LinkedList<>();
        }
    }

    // Function to add an edge to the graph
    public void addEdge(int src, int dest) {
        adj[src].add(dest); // Adding an edge from src to dest
    }

    // Function to perform BFS starting from a source vertex
    public void bfsTraversal(int startVertex) {
        boolean visited[] = new boolean[vertices]; // To keep track of visited nodes
        Queue<Integer> queue = new LinkedList<>(); // Queue for BFS

        // Start with the source vertex
        visited[startVertex] = true;
        queue.add(startVertex);

        System.out.println("BFS Traversal starting from vertex " + startVertex + ":");

        while (!queue.isEmpty()) {
            int vertex = queue.poll(); // Remove the head of the queue
            System.out.print(vertex + " "); // Process the current node

            // Get all adjacent vertices of the dequeued vertex
            for (int neighbor : adj[vertex]) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true; // Mark the vertex as visited
                    queue.add(neighbor); // Add the vertex to the queue
                }
            }
        }
        System.out.println();
    }

    // Main method to test the BFS
    public static void main(String[] args) {
        BFS graph = new BFS(6); // Create a graph with 6 vertices

        // Add edges to the graph
        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(1, 4);
        graph.addEdge(2, 4);
        graph.addEdge(3, 5);
        graph.addEdge(4, 5);

        // Perform BFS starting from vertex 0
        graph.bfsTraversal(0);
    }
}
